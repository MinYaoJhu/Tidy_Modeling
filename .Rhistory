glance(lm_form_fit1)
lm_form_fit1 %>%
extract_fit_engine() %>%
summary()
lm_form_fit2 <-
lm_model %>%
# Recall that Sale_Price has been pre-logged
fit(weight ~ Diet * Time, data = chick_train)
lm_form_fit2
tidy(lm_form_fit2)
glance(lm_form_fit2)
lm_form_fit2 %>%
extract_fit_engine() %>%
summary()
show_engines('linear_reg')
lmer_spec <-
linear_reg() %>%
set_engine("lmer")
lmer_fit <-
lmer_spec %>%
fit(weight ~ Time + Diet + (1|Chick), data = chick_train)
lmer_fit
lmer_fit %>%
extract_fit_engine() %>%
summary()
lmer_spec <-
linear_reg() %>%
set_engine("lmer")
lmer_fit_i <-
lmer_spec %>%
fit(weight ~ Time*Diet + (1|Chick), data = chick_train)
lmer_fit_i
lmer_fit_i %>%
extract_fit_engine() %>%
summary()
ChickWeight %>%
ggplot(aes(x=Time, y=weight)) +
geom_smooth(aes(colour=Diet))
ChickWeight %>%
ggplot(aes(x=Time, y=weight)) +
geom_line(aes(colour=Chick))
predict1 <- chick_test %>%
select(Time, Diet, weight) %>%
bind_cols(predict(lm_form_fit1, chick_test))
predict1
plot1 <- predict1 |>
ggplot(aes(x=weight, y=.pred, color=Diet)) +
geom_point() +
theme_light() +
labs(title = "predict_1: weight ~ Diet + Time")
plot1
predict2 <- chick_test %>%
select(Time, Diet, weight) %>%
bind_cols(predict(lm_form_fit2, chick_test))
predict2
plot2 <- predict2 |>
ggplot(aes(x=weight, y=.pred, color=Diet)) +
geom_point() +
theme_light() +
labs(title = "predict_2: weight ~ Diet * Time")
plot2
predict3 <- chick_test %>%
select(Time, Diet, weight) %>%
bind_cols(predict(lmer_fit, chick_test))
predict3
plot3 <- predict3 |>
ggplot(aes(x=weight, y=.pred, color=Diet)) +
geom_point() +
theme_light() +
labs(title = "predict_3: weight ~ Time + Diet + (1|Chick)")
plot3
predict4 <- chick_test %>%
select(Time, Diet, weight) %>%
bind_cols(predict(lmer_fit_i, chick_test))
predict4
plot4 <- predict4 |>
ggplot(aes(x=weight, y=.pred, color=Diet)) +
geom_point() +
theme_light() +
labs(title = "predict_4: weight ~ Time*Diet + (1|Chick)")
plot4
predict1_l <- predict1 |>
pivot_longer(cols=c(weight, .pred))
predict1_l
predict_plot_1 <- predict1_l |>
ggplot(aes(x=Time, y=value, color=Diet, lty=name)) +
geom_smooth() +
theme_light() +
labs(title = "predict_1: weight ~ Diet + Time")
predict_plot_1
predict2_l <- predict2 |>
pivot_longer(cols=c(weight, .pred))
predict2_l
predict_plot_2 <- predict2_l |>
ggplot(aes(x=Time, y=value, color=Diet, lty=name)) +
geom_smooth() +
theme_light() +
labs(title = "predict_2: weight ~ Diet * Time")
predict_plot_2
predict3_l <- predict3 |>
pivot_longer(cols=c(weight, .pred))
predict3_l
predict_plot_3 <- predict3_l |>
ggplot(aes(x=Time, y=value, color=Diet, lty=name)) +
geom_smooth() +
theme_light() +
labs(title = "predict_3: weight ~ Time + Diet + (1|Chick)")
predict_plot_3
predict4_l <- predict4 |>
pivot_longer(cols=c(weight, .pred))
predict4_l
predict_plot_4 <- predict4_l |>
ggplot(aes(x=Time, y=value, color=Diet, lty=name)) +
geom_smooth() +
theme_light() +
labs(title = "predict_4: weight ~ Time*Diet + (1|Chick)")
predict_plot_4
grid.arrange(plot1, plot2, plot3, plot4)
grid.arrange(predict_plot_1, predict_plot_2, predict_plot_3, predict_plot_4)
library(tidymodels)
library(kknn)
library(kableExtra)
library(tidyr)
library(multilevelmod)
library(gridExtra)
?ChickWeight
data(ChickWeight)
summary(ChickWeight)
skimr::skim(ChickWeight) #nicer summary
str(ChickWeight)
# Create a simple random sample of Chick indices
set.seed(123)
chick_indices <- group_initial_split(ChickWeight, group = Chick, prop = 0.8, strata = Diet)
chick_indices
# Extract the training and test sets
chick_train <- training(chick_indices)
chick_test <- testing(chick_indices)
str(chick_train)
str(chick_test)
skimr::skim(chick_train)
skimr::skim(chick_test)
lm_model <-
linear_reg() |>
set_engine("lm")
lm_form_fit1 <-
lm_model |>
# Recall that Sale_Price has been pre-logged
fit(weight ~ Diet + Time, data = chick_train)
lm_form_fit1
tidy(lm_form_fit1)
glance(lm_form_fit1)
lm_form_fit1 |>
extract_fit_engine() |>
summary()
lm_form_fit2 <-
lm_model |>
# Recall that Sale_Price has been pre-logged
fit(weight ~ Diet * Time, data = chick_train)
lm_form_fit2
tidy(lm_form_fit2)
glance(lm_form_fit2)
lm_form_fit2 |>
extract_fit_engine() |>
summary()
show_engines('linear_reg')
lmer_spec <-
linear_reg() |>
set_engine("lmer")
lmer_fit <-
lmer_spec |>
fit(weight ~ Time + Diet + (1|Chick), data = chick_train)
lmer_fit
lmer_fit |>
extract_fit_engine() |>
summary()
lmer_spec <-
linear_reg() |>
set_engine("lmer")
lmer_fit_i <-
lmer_spec |>
fit(weight ~ Time*Diet + (1|Chick), data = chick_train)
lmer_fit_i
lmer_fit_i |>
extract_fit_engine() |>
summary()
ChickWeight |>
ggplot(aes(x=Time, y=weight)) +
geom_smooth(aes(colour=Diet))
ChickWeight |>
ggplot(aes(x=Time, y=weight)) +
geom_line(aes(colour=Chick))
predict1 <- chick_test |>
select(Time, Diet, weight) |>
bind_cols(predict(lm_form_fit1, chick_test))
predict1
plot1 <- predict1 |>
ggplot(aes(x=weight, y=.pred, color=Diet)) +
geom_point() +
theme_light() +
labs(title = "predict_1: weight ~ Diet + Time")
plot1
predict2 <- chick_test |>
select(Time, Diet, weight) |>
bind_cols(predict(lm_form_fit2, chick_test))
predict2
plot2 <- predict2 |>
ggplot(aes(x=weight, y=.pred, color=Diet)) +
geom_point() +
theme_light() +
labs(title = "predict_2: weight ~ Diet * Time")
plot2
predict3 <- chick_test |>
select(Time, Diet, weight) |>
bind_cols(predict(lmer_fit, chick_test))
predict3
plot3 <- predict3 |>
ggplot(aes(x=weight, y=.pred, color=Diet)) +
geom_point() +
theme_light() +
labs(title = "predict_3: weight ~ Time + Diet + (1|Chick)")
plot3
predict4 <- chick_test |>
select(Time, Diet, weight) |>
bind_cols(predict(lmer_fit_i, chick_test))
predict4
plot4 <- predict4 |>
ggplot(aes(x=weight, y=.pred, color=Diet)) +
geom_point() +
theme_light() +
labs(title = "predict_4: weight ~ Time*Diet + (1|Chick)")
plot4
predict1_l <- predict1 |>
pivot_longer(cols=c(weight, .pred))
predict1_l
predict_plot_1 <- predict1_l |>
ggplot(aes(x=Time, y=value, color=Diet, lty=name)) +
geom_smooth() +
theme_light() +
labs(title = "predict_1: weight ~ Diet + Time")
predict_plot_1
predict2_l <- predict2 |>
pivot_longer(cols=c(weight, .pred))
predict2_l
predict_plot_2 <- predict2_l |>
ggplot(aes(x=Time, y=value, color=Diet, lty=name)) +
geom_smooth() +
theme_light() +
labs(title = "predict_2: weight ~ Diet * Time")
predict_plot_2
predict3_l <- predict3 |>
pivot_longer(cols=c(weight, .pred))
predict3_l
predict_plot_3 <- predict3_l |>
ggplot(aes(x=Time, y=value, color=Diet, lty=name)) +
geom_smooth() +
theme_light() +
labs(title = "predict_3: weight ~ Time + Diet + (1|Chick)")
predict_plot_3
predict4_l <- predict4 |>
pivot_longer(cols=c(weight, .pred))
predict4_l
predict_plot_4 <- predict4_l |>
ggplot(aes(x=Time, y=value, color=Diet, lty=name)) +
geom_smooth() +
theme_light() +
labs(title = "predict_4: weight ~ Time*Diet + (1|Chick)")
predict_plot_4
grid.arrange(plot1, plot2, plot3, plot4)
grid.arrange(predict_plot_1, predict_plot_2, predict_plot_3, predict_plot_4)
library(broom.mixed)
install.packages("broom.mixed")
library(broom.mixed)
library(lmerTest)
install.packages("lmerTest")
library(lmerTest)
chick.train %>% group_by(Diet) %>% summarize(chicks = length(unique(Chick)))
chick_train %>% group_by(Diet) %>% summarize(chicks = length(unique(Chick)))
chick_train %>% group_by(Diet) %>% summarize(chicks = length(unique(Chick)))
chick_test %>% group_by(Diet) %>% summarize(chicks = length(unique(Chick)))
tidy(lmer_fit)
tidy(lmer_fit)
glimpse(lmer_fit)
tidy(lmer_fit_i)
glimpse(lmer_fit_i)
glimpse(lmer_fit_i)
tidy(lmer_fit)
glance(lmer_fit)
glance(lmer_fit_i)
bind_rows(glance(lm_form_fit1), glance(lm_form_fit2), glance(lmer_fit),glance(lmer_fit_i))
anova(extract_fit_engine(lm_form_fit1),extract_fit_engine(lm_form_fit2))
anova(extract_fit_engine(lm_form_fit1),
extract_fit_engine(lm_form_fit2),
extract_fit_engine(lmer_fit),
extract_fit_engine(lmer_fit_i))
anova(extract_fit_engine(lm_form_fit1),
extract_fit_engine(lm_form_fit2),
extract_fit_engine(lmer_fit),
extract_fit_engine(lmer_fit_i))
anova(extract_fit_engine(lm_form_fit1),
extract_fit_engine(lm_form_fit2))
anova(extract_fit_engine(lmer_fit),
extract_fit_engine(lmer_fit_i))
anova(extract_fit_engine(lm_form_fit1),
extract_fit_engine(lm_form_fit2))
anova(extract_fit_engine(lmer_fit),
extract_fit_engine(lmer_fit_i))
?predict.merMod
predict_plot_2 <- predict2_l |>
ggplot(aes(x=Time, y=value, color=Diet, lty=name)) +
geom_smooth() +
theme_light() +
labs(title = "predict_2: weight ~ Diet * Time")
predict_plot_2
predict3 <- chick_test |>
select(Time, Diet, weight) |>
bind_cols(predict(lmer_fit, chick_test))
predict3
predict3 <- chick_test |>
select(Time, Diet, weight) |>
bind_cols(predict(lmer_fit, chick_test))
predict3
predict2 <- chick_test |>
select(Time, Diet, weight) |>
bind_cols(predict(lm_form_fit2, chick_test))
predict2
predict1 <- chick_test |>
select(Time, Diet, weight) |>
bind_cols(predict(lm_form_fit1, chick_test))
predict1
grid.arrange(plot1, plot2, plot3, plot4)
install.packages(c("bookdown", "bslib", "checkmate", "cluster", "cpp11", "curl", "data.table", "dbscan", "DiceDesign", "dotCall64", "dplyr", "dqrng", "DT", "e1071", "expm", "fansi", "foreign", "gert", "haven", "htmlwidgets", "httpuv", "jsonlite", "later", "markdown", "Matrix", "nlme", "progress", "PROJ", "qs", "RcppArmadillo", "rgl", "rJava", "robustbase", "rpart", "RSQLite", "Rtsne", "sass", "scales", "segmented", "seqinr", "spatstat.random", "stringfish", "svglite", "testthat", "tiff", "TTR", "units", "vctrs", "vroom", "wk", "XML", "xml2"))
knitr::opts_chunk$set(fig.path = "figures/")
library(tidymodels)
library(kknn)
library(kableExtra)
library(tidyr)
tidymodels_prefer()
source("ames_snippets.R")
knitr::opts_chunk$set(fig.path = "figures/")
library(tidymodels)
library(workflowsets)
library(kableExtra)
library(censored)
library(survival)
tidymodels_prefer()
source("ames_snippets.R")
#| fig.cap = "Incorrect mental model of where model estimation occurs in the data analysis process",
#| fig.alt = "An incorrect mental model of where model estimation occurs in the data analysis process. The data and predictor set are substrates for an initial preprocessing step using PCA. These data are passed to the model fitting algorithm to produce a fitted model. The figure indicates that the model workflow only includes the model fitting process. This implies that the model fit is the only place where estimation occurs."
knitr::include_graphics("premade/bad-workflow.svg")
#| fig.cap = "Correct mental model of where model estimation occurs in the data analysis process",
#| fig.alt = "A correct mental model of where model estimation occurs in the data analysis process. The data and predictor set are substrates for an initial preprocessing step using PCA. These data are passed to the model fitting algorithm to produce a fitted model. The figure indicates that the model workflow includes the model fitting process and the PCA step. This implies that both operations should be considered estimation steps."
knitr::include_graphics("premade/proper-workflow.svg")
library(tidymodels)  # Includes the workflows package
tidymodels_prefer()
lm_model <-
linear_reg() %>%
set_engine("lm")
lm_wflow <-
workflow() %>%
add_model(lm_model)
lm_wflow
lm_wflow <-
lm_wflow %>%
add_formula(Sale_Price ~ Longitude + Latitude)
lm_wflow
lm_fit <- fit(lm_wflow, ames_train)
lm_fit
predict(lm_fit, ames_test %>% slice(1:3))
lm_fit %>% update_formula(Sale_Price ~ Longitude)
lm_wflow <-
lm_wflow %>%
remove_formula() %>%
add_variables(outcome = Sale_Price, predictors = c(Longitude, Latitude))
lm_wflow
predictors = c(ends_with("tude"))
predictors = everything()
lm_wflow <-
lm_wflow %>%
remove_formula() %>%
add_variables(outcome = Sale_Price, predictors = c(ends_with("tude")))
lm_wflow <-
lm_wflow %>%
add_variables(outcome = Sale_Price, predictors = c(ends_with("tude")))
lm_wflow <-
lm_wflow %>%
add_formula(Sale_Price ~ Longitude + Latitude)
knitr::opts_chunk$set(fig.path = "figures/")
library(tidymodels)
library(workflowsets)
library(kableExtra)
library(censored)
library(survival)
tidymodels_prefer()
source("ames_snippets.R")
#| fig.cap = "Incorrect mental model of where model estimation occurs in the data analysis process",
#| fig.alt = "An incorrect mental model of where model estimation occurs in the data analysis process. The data and predictor set are substrates for an initial preprocessing step using PCA. These data are passed to the model fitting algorithm to produce a fitted model. The figure indicates that the model workflow only includes the model fitting process. This implies that the model fit is the only place where estimation occurs."
knitr::include_graphics("premade/bad-workflow.svg")
#| fig.cap = "Correct mental model of where model estimation occurs in the data analysis process",
#| fig.alt = "A correct mental model of where model estimation occurs in the data analysis process. The data and predictor set are substrates for an initial preprocessing step using PCA. These data are passed to the model fitting algorithm to produce a fitted model. The figure indicates that the model workflow includes the model fitting process and the PCA step. This implies that both operations should be considered estimation steps."
knitr::include_graphics("premade/proper-workflow.svg")
library(tidymodels)  # Includes the workflows package
tidymodels_prefer()
lm_model <-
linear_reg() %>%
set_engine("lm")
lm_wflow <-
workflow() %>%
add_model(lm_model)
lm_wflow
lm_wflow <-
lm_wflow %>%
add_formula(Sale_Price ~ Longitude + Latitude)
lm_wflow
lm_fit <- fit(lm_wflow, ames_train)
lm_fit
predict(lm_fit, ames_test %>% slice(1:3))
lm_fit %>% update_formula(Sale_Price ~ Longitude)
lm_wflow1 <-
lm_wflow %>%
remove_formula() %>%
add_variables(outcome = Sale_Price, predictors = c(Longitude, Latitude))
lm_wflow1
lm_wflow2 <-
lm_wflow %>%
remove_formula() %>%
add_variables(outcome = Sale_Price, predictors = c(ends_with("tude")))
lm_wflow2
lm_wflow3 <-
lm_wflow %>%
remove_formula() %>%
add_variables(outcome = Sale_Price, predictors = everything())
lm_wflow3
lm_wflow <-
lm_wflow %>%
remove_formula() %>%
add_variables(outcome = Sale_Price, predictors = c(Longitude, Latitude))
lm_wflow
fit(lm_wflow, ames_train)
library(lme4)
lmer(distance ~ Sex + (age | Subject), data = Orthodont)
install.packages("nlme")
library(lme4)
lmer(distance ~ Sex + (age | Subject), data = Orthodont)
library(nlme)
lmer(distance ~ Sex + (age | Subject), data = Orthodont)
data(Orthodont, package = "nlme")
model.matrix(distance ~ Sex + (age | Subject), data = Orthodont)
library(multilevelmod)
multilevel_spec <- linear_reg() %>% set_engine("lmer")
multilevel_workflow <-
workflow() %>%
# Pass the data along as-is:
add_variables(outcome = distance, predictors = c(Sex, age, Subject)) %>%
add_model(multilevel_spec,
# This formula is given to the model
formula = distance ~ Sex + (age | Subject))
multilevel_fit <- fit(multilevel_workflow, data = Orthodont)
multilevel_fit
library(censored)
parametric_spec <- survival_reg()
parametric_workflow <-
workflow() %>%
add_variables(outcome = c(fustat, futime), predictors = c(age, rx)) %>%
add_model(parametric_spec,
formula = Surv(futime, fustat) ~ age + strata(rx))
parametric_fit <- fit(parametric_workflow, data = ovarian)
parametric_fit
location <- list(
longitude = Sale_Price ~ Longitude,
latitude = Sale_Price ~ Latitude,
coords = Sale_Price ~ Longitude + Latitude,
neighborhood = Sale_Price ~ Neighborhood
)
library(workflowsets)
location_models <- workflow_set(preproc = location, models = list(lm = lm_model))
location_models
location_models$info[[1]]
extract_workflow(location_models, id = "coords_lm")
location_models <-
location_models %>%
mutate(fit = map(info, ~ fit(.x$workflow[[1]], ames_train)))
location_models
location_models$fit[[1]]
final_lm_res <- last_fit(lm_wflow, ames_split)
final_lm_res
fitted_lm_wflow <- extract_workflow(final_lm_res)
collect_metrics(final_lm_res)
collect_predictions(final_lm_res) %>% slice(1:5)
library(tidymodels)
data(ames)
ames <- mutate(ames, Sale_Price = log10(Sale_Price))
set.seed(502)
ames_split <- initial_split(ames, prop = 0.80, strata = Sale_Price)
ames_train <- training(ames_split)
ames_test  <-  testing(ames_split)
lm_model <- linear_reg() %>% set_engine("lm")
lm_wflow <-
workflow() %>%
add_model(lm_model) %>%
add_variables(outcome = Sale_Price, predictors = c(Longitude, Latitude))
lm_fit <- fit(lm_wflow, ames_train)
location <- list(
longitude = Sale_Price ~ Longitude,
latitude = Sale_Price ~ Latitude,
coords = Sale_Price ~ Longitude * Latitude,
neighborhood = Sale_Price ~ Neighborhood
)
library(workflowsets)
location_models <- workflow_set(preproc = location, models = list(lm = lm_model))
location_models
location_models$info[[1]]
extract_workflow(location_models, id = "coords_lm")
